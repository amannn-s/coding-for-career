generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  blogs         Blog[]
  comments      Comment[]
  likes         Like[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Blog {
  id         String     @id @default(cuid())
  title      String
  slug       String     @unique @default("no-slug")
  excerpt    String     @default("No excerpt provided")
  content    String?
  thumbnail  String?
  published  Boolean    @default(true)
  authorId   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments   Comment[]
  likes      Like[]
  categories Category[]
  tags       Tag[]

  viewCount Int       @default(0)
  deletedAt DateTime?

  @@index([slug])
  @@index([viewCount])
  @@index([authorId])
  @@index([published])
  @@index([createdAt])
  @@index([deletedAt])
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  blogs Blog[]
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  blogs Blog[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  blogId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  blog   Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
}

model Like {
  id        String   @id @default(cuid())
  blogId    String
  userId    String
  createdAt DateTime @default(now())
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([blogId, userId])
}
